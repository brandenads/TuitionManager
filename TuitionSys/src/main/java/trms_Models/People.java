package trms_Models;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * People Value Object.
  * This class is value object representing database table People
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class People implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int personID;
    private String name;
    private int supervisorID;
    private int deptHeadID;
    private int benCoID;
    private String username;
    private String password;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public People () {

    }

    public People (int personIDIn) {

          this.personID = personIDIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getPersonID() {
          return this.personID;
    }
    public void setPersonID(int personIDIn) {
          this.personID = personIDIn;
    }

    public String getName() {
          return this.name;
    }
    public void setName(String nameIn) {
          this.name = nameIn;
    }

    public int getSupervisorID() {
          return this.supervisorID;
    }
    public void setSupervisorID(int supervisorIDIn) {
          this.supervisorID = supervisorIDIn;
    }

    public int getDeptHeadID() {
          return this.deptHeadID;
    }
    public void setDeptHeadID(int deptHeadIDIn) {
          this.deptHeadID = deptHeadIDIn;
    }

    public int getBenCoID() {
          return this.benCoID;
    }
    public void setBenCoID(int benCoIDIn) {
          this.benCoID = benCoIDIn;
    }

    public String getUsername() {
          return this.username;
    }
    public void setUsername(String usernameIn) {
          this.username = usernameIn;
    }

    public String getPassword() {
          return this.password;
    }
    public void setPassword(String passwordIn) {
          this.password = passwordIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int personIDIn,
          String nameIn,
          int supervisorIDIn,
          int deptHeadIDIn,
          int benCoIDIn,
          String usernameIn,
          String passwordIn) {
          this.personID = personIDIn;
          this.name = nameIn;
          this.supervisorID = supervisorIDIn;
          this.deptHeadID = deptHeadIDIn;
          this.benCoID = benCoIDIn;
          this.username = usernameIn;
          this.password = passwordIn;
    }


    /** 
     * hasEqualMapping-method will compare two People instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(People valueObject) {

          if (valueObject.getPersonID() != this.personID) {
                    return(false);
          }
          if (this.name == null) {
                    if (valueObject.getName() != null)
                           return(false);
          } else if (!this.name.equals(valueObject.getName())) {
                    return(false);
          }
          if (valueObject.getSupervisorID() != this.supervisorID) {
                    return(false);
          }
          if (valueObject.getDeptHeadID() != this.deptHeadID) {
                    return(false);
          }
          if (valueObject.getBenCoID() != this.benCoID) {
                    return(false);
          }
          if (this.username == null) {
                    if (valueObject.getUsername() != null)
                           return(false);
          } else if (!this.username.equals(valueObject.getUsername())) {
                    return(false);
          }
          if (this.password == null) {
                    if (valueObject.getPassword() != null)
                           return(false);
          } else if (!this.password.equals(valueObject.getPassword())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass People, mapping to table People\n");
        out.append("Persistent attributes: \n"); 
        out.append("personID = " + this.personID + "\n"); 
        out.append("name = " + this.name + "\n"); 
        out.append("supervisorID = " + this.supervisorID + "\n"); 
        out.append("deptHeadID = " + this.deptHeadID + "\n"); 
        out.append("benCoID = " + this.benCoID + "\n"); 
        out.append("username = " + this.username + "\n"); 
        out.append("password = " + this.password + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        People cloned = new People();

        cloned.setPersonID(this.personID); 
        if (this.name != null)
             cloned.setName(new String(this.name)); 
        cloned.setSupervisorID(this.supervisorID); 
        cloned.setDeptHeadID(this.deptHeadID); 
        cloned.setBenCoID(this.benCoID); 
        if (this.username != null)
             cloned.setUsername(new String(this.username)); 
        if (this.password != null)
             cloned.setPassword(new String(this.password)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

